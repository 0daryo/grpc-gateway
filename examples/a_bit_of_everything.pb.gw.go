// Code generated by protoc-gen-grpc-gateway
// source: examples/a_bit_of_everything.proto
// DO NOT EDIT!

/*
Package main is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package main

import (
	"encoding/json"
	"io"
	"net/http"

	"github.com/gengo/grpc-gateway/runtime"
	"github.com/golang/glog"
	"github.com/golang/protobuf/proto"
	"github.com/zenazn/goji/web"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"

	gengo_grpc_gateway_examples_sub "github.com/gengo/grpc-gateway/examples/sub"
)

var _ codes.Code
var _ io.Reader
var _ = runtime.String

func request_ABitOfEverythingService_Create(ctx context.Context, c web.C, client ABitOfEverythingServiceClient, req *http.Request) (msg proto.Message, err error) {
	var protoReq ABitOfEverything

	if err = json.NewDecoder(req.Body).Decode(&protoReq); err != nil {
		return nil, err
	}

	var val string
	var ok bool

	val, ok = c.URLParams["float_value"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "float_value")
	}
	protoReq.FloatValue, err = runtime.Float32(val)
	if err != nil {
		return nil, err
	}

	val, ok = c.URLParams["double_value"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "double_value")
	}
	protoReq.DoubleValue, err = runtime.Float64(val)
	if err != nil {
		return nil, err
	}

	val, ok = c.URLParams["int64_value"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "int64_value")
	}
	protoReq.Int64Value, err = runtime.Int64(val)
	if err != nil {
		return nil, err
	}

	val, ok = c.URLParams["uint64_value"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "uint64_value")
	}
	protoReq.Uint64Value, err = runtime.Uint64(val)
	if err != nil {
		return nil, err
	}

	val, ok = c.URLParams["int32_value"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "int32_value")
	}
	protoReq.Int32Value, err = runtime.Int32(val)
	if err != nil {
		return nil, err
	}

	val, ok = c.URLParams["fixed64_value"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "fixed64_value")
	}
	protoReq.Fixed64Value, err = runtime.Uint64(val)
	if err != nil {
		return nil, err
	}

	val, ok = c.URLParams["fixed32_value"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "fixed32_value")
	}
	protoReq.Fixed32Value, err = runtime.Uint32(val)
	if err != nil {
		return nil, err
	}

	val, ok = c.URLParams["bool_value"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "bool_value")
	}
	protoReq.BoolValue, err = runtime.Bool(val)
	if err != nil {
		return nil, err
	}

	val, ok = c.URLParams["string_value"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "string_value")
	}
	protoReq.StringValue, err = runtime.String(val)
	if err != nil {
		return nil, err
	}

	val, ok = c.URLParams["uint32_value"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "uint32_value")
	}
	protoReq.Uint32Value, err = runtime.Uint32(val)
	if err != nil {
		return nil, err
	}

	val, ok = c.URLParams["sfixed32_value"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "sfixed32_value")
	}
	protoReq.Sfixed32Value, err = runtime.Int32(val)
	if err != nil {
		return nil, err
	}

	val, ok = c.URLParams["sfixed64_value"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "sfixed64_value")
	}
	protoReq.Sfixed64Value, err = runtime.Int64(val)
	if err != nil {
		return nil, err
	}

	val, ok = c.URLParams["sint32_value"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "sint32_value")
	}
	protoReq.Sint32Value, err = runtime.Int32(val)
	if err != nil {
		return nil, err
	}

	val, ok = c.URLParams["sint64_value"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "sint64_value")
	}
	protoReq.Sint64Value, err = runtime.Int64(val)
	if err != nil {
		return nil, err
	}

	return client.Create(ctx, &protoReq)
}

func request_ABitOfEverythingService_CreateBody(ctx context.Context, c web.C, client ABitOfEverythingServiceClient, req *http.Request) (msg proto.Message, err error) {
	var protoReq ABitOfEverything

	if err = json.NewDecoder(req.Body).Decode(&protoReq); err != nil {
		return nil, err
	}

	return client.CreateBody(ctx, &protoReq)
}

func request_ABitOfEverythingService_BulkCreate(ctx context.Context, c web.C, client ABitOfEverythingServiceClient, req *http.Request) (msg proto.Message, err error) {
	stream, err := client.BulkCreate(ctx)
	if err != nil {
		glog.Errorf("Failed to start streaming: %v", err)
		return nil, err
	}
	dec := json.NewDecoder(req.Body)
	for {
		var protoReq ABitOfEverything
		err = dec.Decode(&protoReq)
		if err == io.EOF {
			break
		}
		if err != nil {
			glog.Errorf("Failed to decode request: %v", err)
			return nil, grpc.Errorf(codes.InvalidArgument, "%v", err)
		}
		if err = stream.Send(&protoReq); err != nil {
			glog.Errorf("Failed to send request: %v", err)
			return nil, err
		}
	}

	return stream.CloseAndRecv()

}

func request_ABitOfEverythingService_Lookup(ctx context.Context, c web.C, client ABitOfEverythingServiceClient, req *http.Request) (msg proto.Message, err error) {
	var protoReq IdMessage

	var val string
	var ok bool

	val, ok = c.URLParams["uuid"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "uuid")
	}
	protoReq.Uuid, err = runtime.String(val)
	if err != nil {
		return nil, err
	}

	return client.Lookup(ctx, &protoReq)
}

func request_ABitOfEverythingService_List(ctx context.Context, c web.C, client ABitOfEverythingServiceClient, req *http.Request) (ABitOfEverythingService_ListClient, error) {
	var protoReq EmptyMessage

	return client.List(ctx, &protoReq)
}

func request_ABitOfEverythingService_Update(ctx context.Context, c web.C, client ABitOfEverythingServiceClient, req *http.Request) (msg proto.Message, err error) {
	var protoReq ABitOfEverything

	if err = json.NewDecoder(req.Body).Decode(&protoReq); err != nil {
		return nil, err
	}

	var val string
	var ok bool

	val, ok = c.URLParams["uuid"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "uuid")
	}
	protoReq.Uuid, err = runtime.String(val)
	if err != nil {
		return nil, err
	}

	return client.Update(ctx, &protoReq)
}

func request_ABitOfEverythingService_Delete(ctx context.Context, c web.C, client ABitOfEverythingServiceClient, req *http.Request) (msg proto.Message, err error) {
	var protoReq IdMessage

	var val string
	var ok bool

	val, ok = c.URLParams["uuid"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "uuid")
	}
	protoReq.Uuid, err = runtime.String(val)
	if err != nil {
		return nil, err
	}

	return client.Delete(ctx, &protoReq)
}

func request_ABitOfEverythingService_Echo(ctx context.Context, c web.C, client ABitOfEverythingServiceClient, req *http.Request) (msg proto.Message, err error) {
	var protoReq gengo_grpc_gateway_examples_sub.StringMessage

	var val string
	var ok bool

	val, ok = c.URLParams["value"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "value")
	}
	protoReq.Value, err = runtime.StringP(val)
	if err != nil {
		return nil, err
	}

	return client.Echo(ctx, &protoReq)
}

func request_ABitOfEverythingService_BulkEcho(ctx context.Context, c web.C, client ABitOfEverythingServiceClient, req *http.Request) (ABitOfEverythingService_BulkEchoClient, error) {
	stream, err := client.BulkEcho(ctx)
	if err != nil {
		glog.Errorf("Failed to start streaming: %v", err)
		return nil, err
	}
	dec := json.NewDecoder(req.Body)
	for {
		var protoReq gengo_grpc_gateway_examples_sub.StringMessage
		err = dec.Decode(&protoReq)
		if err == io.EOF {
			break
		}
		if err != nil {
			glog.Errorf("Failed to decode request: %v", err)
			return nil, grpc.Errorf(codes.InvalidArgument, "%v", err)
		}
		if err = stream.Send(&protoReq); err != nil {
			glog.Errorf("Failed to send request: %v", err)
			return nil, err
		}
	}

	if err = stream.CloseSend(); err != nil {
		glog.Errorf("Failed to terminate client stream: %v", err)
		return nil, err
	}
	return stream, nil

}

// RegisterABitOfEverythingServiceHandlerFromEndpoint is same as RegisterABitOfEverythingServiceHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterABitOfEverythingServiceHandlerFromEndpoint(ctx context.Context, mux *web.Mux, endpoint string) (err error) {
	conn, err := grpc.Dial(endpoint)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				glog.Error("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				glog.Error("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterABitOfEverythingServiceHandler(ctx, mux, conn)
}

// RegisterABitOfEverythingServiceHandler registers the http handlers for service ABitOfEverythingService to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterABitOfEverythingServiceHandler(ctx context.Context, mux *web.Mux, conn *grpc.ClientConn) error {
	client := NewABitOfEverythingServiceClient(conn)

	mux.Post("/v1/example/a_bit_of_everything/:float_value/:double_value/:int64_value/separator/:uint64_value/:int32_value/:fixed64_value/:fixed32_value/:bool_value/:string_value/:uint32_value/:sfixed32_value/:sfixed64_value/:sint32_value/:sint64_value", func(c web.C, w http.ResponseWriter, req *http.Request) {
		resp, err := request_ABitOfEverythingService_Create(ctx, c, client, req)
		if err != nil {
			runtime.HTTPError(w, err)
			return
		}

		runtime.ForwardResponseMessage(w, resp)

	})

	mux.Post("/v1/example/a_bit_of_everything", func(c web.C, w http.ResponseWriter, req *http.Request) {
		resp, err := request_ABitOfEverythingService_CreateBody(ctx, c, client, req)
		if err != nil {
			runtime.HTTPError(w, err)
			return
		}

		runtime.ForwardResponseMessage(w, resp)

	})

	mux.Post("/v1/example/a_bit_of_everything/bulk", func(c web.C, w http.ResponseWriter, req *http.Request) {
		resp, err := request_ABitOfEverythingService_BulkCreate(ctx, c, client, req)
		if err != nil {
			runtime.HTTPError(w, err)
			return
		}

		runtime.ForwardResponseMessage(w, resp)

	})

	mux.Get("/v1/example/a_bit_of_everything/:uuid", func(c web.C, w http.ResponseWriter, req *http.Request) {
		resp, err := request_ABitOfEverythingService_Lookup(ctx, c, client, req)
		if err != nil {
			runtime.HTTPError(w, err)
			return
		}

		runtime.ForwardResponseMessage(w, resp)

	})

	mux.Get("/v1/example/a_bit_of_everything", func(c web.C, w http.ResponseWriter, req *http.Request) {
		resp, err := request_ABitOfEverythingService_List(ctx, c, client, req)
		if err != nil {
			runtime.HTTPError(w, err)
			return
		}

		runtime.ForwardResponseStream(w, func() (proto.Message, error) { return resp.Recv() })

	})

	mux.Put("/v1/example/a_bit_of_everything/:uuid", func(c web.C, w http.ResponseWriter, req *http.Request) {
		resp, err := request_ABitOfEverythingService_Update(ctx, c, client, req)
		if err != nil {
			runtime.HTTPError(w, err)
			return
		}

		runtime.ForwardResponseMessage(w, resp)

	})

	mux.Delete("/v1/example/a_bit_of_everything/:uuid", func(c web.C, w http.ResponseWriter, req *http.Request) {
		resp, err := request_ABitOfEverythingService_Delete(ctx, c, client, req)
		if err != nil {
			runtime.HTTPError(w, err)
			return
		}

		runtime.ForwardResponseMessage(w, resp)

	})

	mux.Get("/v1/example/a_bit_of_everything/echo/:value", func(c web.C, w http.ResponseWriter, req *http.Request) {
		resp, err := request_ABitOfEverythingService_Echo(ctx, c, client, req)
		if err != nil {
			runtime.HTTPError(w, err)
			return
		}

		runtime.ForwardResponseMessage(w, resp)

	})

	mux.Post("/v1/example/a_bit_of_everything/echo", func(c web.C, w http.ResponseWriter, req *http.Request) {
		resp, err := request_ABitOfEverythingService_BulkEcho(ctx, c, client, req)
		if err != nil {
			runtime.HTTPError(w, err)
			return
		}

		runtime.ForwardResponseStream(w, func() (proto.Message, error) { return resp.Recv() })

	})

	return nil
}
